@using Application.ProductInventory
@using Application.Products
@using Domain.Products.Entities
@using Domain.Products.DTOs
@using Presentation.Core.Components
@using System.Threading;
@using System.Globalization
@using Presentation.Products.Components
@using Presentation.Products.Models
@inject IProductService ProductService
@inject IProductInventoryService InventoryService
@inject ISnackbar SnackBar
@page "/Home"

@if(!_pageState.Loading){
    if (_pageState.BuyPressed)
    {
        <CascadingValue Value="_pageState.TotalCost">
            <PaymentHandler buyPressed="_pageState.BuyPressed" saveTransactionState="_saveTransaction" conMuteOverlayState="_conmuteOverlay"></PaymentHandler>
        </CascadingValue> 
    }
    else
    {
        <MudText Align="Align.Right" Typo="Typo.h6">Costo total: @InventoryService.CostFormat(_pageState.TotalCost) </MudText>
        <MudTable @ref="@_pageState.Table" Items="@_pageState.Inventory" RowsPerPage="4" Elevation="4"  Hover="true" Breakpoint="Breakpoint.Sm" Filter="new Func<ProductDTO,bool>(FilterFunction)">
               
            <ToolBarContent>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="BeginTransaction">Comprar </MudButton>
                <MudSpacer />
            <MudTextField @bind-Value="_pageState.SearchString" Placeholder="Buscar refresco" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent> 

            <HeaderContent>
                <MudTh>Nombre</MudTh>
                <MudTh>Unidades disponibles</MudTh>
                <MudTh>Unidades solicitadas</MudTh>
                <MudTh>Precio unitario</MudTh>
            </HeaderContent>
        
            <RowTemplate>
                <MudTd DataLabel="Nombre">@context.Name</MudTd>
                <MudTd DataLabel="Unidades disponibles">@context.Amount</MudTd>
                <MudTd DataLabel="Unidades solicitadas">
                <MudNumericField  Immediate="true" @bind-Value="context.RequestedUnits" Label="Cantidad" Variant="Variant.Text" Max=context.Amount Min="0"/>
                </MudTd>
                <MudTd  DataLabel="Precio unitario"> <MudText Align="Align.Right">  @InventoryService.CostFormat(context.Price) </MudText></MudTd>
            </RowTemplate>

            <PagerContent>
                <MudPagination SelectedChanged="PageChanged" Count="@((_pageState.Table.GetFilteredItemsCount() + _pageState.Table.RowsPerPage - 1) / _pageState.Table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
            </PagerContent>

        </MudTable>
    }
}else{
    <Loading />
}

@code{
    private ProductIndexState _pageState = new ProductIndexState();
    private EventCallback _conmuteOverlay => EventCallback.Factory.Create(this, ToggleBuyOverlay);
    private EventCallback _saveTransaction => EventCallback.Factory.Create(this, SaveTransaction);

    protected override void OnInitialized()
    {
        LoadInventory();
    }

    private void LoadInventory()
    {
        IList<Product> availableProducts = ProductService.GetAvailableProducts();
        foreach (var product in availableProducts)
        {
            _pageState.Inventory.Add(new ProductDTO(product.Amount, product.Price, product.Name, 0));
        }
        InventoryService.SetInventory(_pageState.Inventory);
        _pageState.Loading = false;
        UpdateTotalCost();
    }

    private void PageChanged(int index)
    {
        _pageState.Table.NavigateTo(index - 1);
    }

    private void BeginTransaction()
    {
        _pageState.BuyPressed = true;
    }

    // refresh screen every 100ms
    private async Task UpdateTotalCost()
    {
        while (true)
        {
            _pageState.TotalCost = InventoryService.UpdateTotalCost();
            await InvokeAsync(StateHasChanged);
            await Task.Delay(100);
        }
    }

    private bool FilterFunction(ProductDTO product) => Filter(product, _pageState.SearchString);
    private bool Filter(ProductDTO product, string SearchString)
    {
        if (string.IsNullOrWhiteSpace(SearchString))
            return true;
        if (product.Name.ToLower().Contains(SearchString.ToLower()))
            return true;
        return false;
    }

    private void ToggleBuyOverlay()
    {
        _pageState.BuyPressed = !_pageState.BuyPressed;
    }

    private void SaveTransaction() 
    {
        _pageState.Inventory = InventoryService.UpdateInventory();
        IList<Product> availableProducts = new List<Product>();
        foreach (var product in _pageState.Inventory)
        {
            availableProducts.Add(new Product(product.Amount, product.Price, product.Name));
        }
        ProductService.UpdateAvailableProducts(availableProducts);
        SnackBar.Add("Compra realizada", Severity.Success);
        ToggleBuyOverlay();
        LoadInventory();
    }
}