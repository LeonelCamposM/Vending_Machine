@using Application.ProductInventory
@using Application.Products
@using Domain.Products.Entities
@using Domain.Products.DTOs
@using Presentation.Core.Components
@using System.Threading;
@using System.Globalization
@using Presentation.Products.Components
@inject IProductService ProductService
@inject IProductInventoryService InventoryService
@inject ISnackbar SnackBar
@page "/home"

@if(!_loading){
        
       <CascadingValue Value="_totalCost">
            <PaymentHandler buyPressed="_buyPressed" updateStockState="_updateStock" conMuteOverlayState="_conmuteOverlay"></PaymentHandler>
       </CascadingValue> 
        <MudText Align="Align.Right" Typo="Typo.h6">Costo total: @InventoryService.CostFormat(_totalCost) </MudText>
        <MudTable @ref="@_table" Items="@_stock" RowsPerPage="4" Elevation="4"  Hover="true" Breakpoint="Breakpoint.Sm" Filter="new Func<ProductDTO,bool>(FilterFunction)">
            <ToolBarContent>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveTransaction">Comprar </MudButton>
                <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Buscar refresco" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent> 
            <HeaderContent>
                <MudTh>Nombre</MudTh>
                <MudTh>Unidades disponibles</MudTh>
                <MudTh>Unidades solicitadas</MudTh>
                <MudTh>Precio unitario</MudTh>
            </HeaderContent>
        
            <RowTemplate>
                    <MudTd DataLabel="Nombre">@context.name</MudTd>
                    <MudTd DataLabel="Unidades disponibles">@context.amount</MudTd>
                    <MudTd DataLabel="Unidades solicitadas">
                        @if(context.amount < context.requestedUnits){
                            <MudNumericField Immediate="true" @bind-Value="context.requestedUnits" Label="Cantidad" Variant="Variant.Text"  Error="true" Min="0"/>
                         }
                        else{
                            <MudNumericField  Immediate="true" @bind-Value="context.requestedUnits" Label="Cantidad" Variant="Variant.Text" Min="0"/>
                        }
                
                    </MudTd>

                <MudTd  DataLabel="Precio unitario"> <MudText Align="Align.Right">  @InventoryService.CostFormat(context.price) </MudText></MudTd>
            </RowTemplate>
        <PagerContent>
            <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
        </PagerContent>
    </MudTable>
}else{
    <Loading />
}

@code{
    private IList<ProductDTO> _stock = new List<ProductDTO>();
    private MudTable<ProductDTO> _table;
    private bool _loading = true;
    private string _searchString = "";
    private int _requestedUnits;
    private ProductDTO _selectedProduct;
    private double _totalCost = 0;
    private bool _inputError = false;
    private bool _buyPressed = false;
    public EventCallback _conmuteOverlay => EventCallback.Factory.Create(this, ToggleBuyOverlay);
    public EventCallback _updateStock => EventCallback.Factory.Create(this, UpdateStock);

    protected override void OnInitialized()
    {
        IList<Product> availableProducts = ProductService.GetAvailableProducts();
        foreach (var product in availableProducts)
        {
            _stock.Add(new ProductDTO(product.amount, product.price, product.name, 0));
        }
        InventoryService.SetInventory(_stock);
        _loading = false;
        UpdateTotalCost();
    }

    private void PageChanged(int index)
    {
        _table.NavigateTo(index - 1);
    }

    private void SaveTransaction()
    {
        if (!_inputError)
        {
            _buyPressed = true;
        }
    }

    // refresh screen every 100ms
    private async Task UpdateTotalCost()
    {
        while (true)
        {
            await ValidateRequestedUnits();
        }
    }

    private async Task ValidateRequestedUnits()
    {
        _inputError = InventoryService.ValidateRequestedUnits();
        if (_inputError)
        {
            SnackBar.Add("Se ha solicitado una cantidad de unidades errónea", Severity.Error);
        }
        else
        {
            _totalCost = InventoryService.UpdateTotalCost();
        }
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100);
    }

    private bool FilterFunction(ProductDTO product) => Filter(product, _searchString);
    private bool Filter(ProductDTO product, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (product.name.Contains(searchString))
            return true;
        return false;
    }

    private void ToggleBuyOverlay()
    {
        _buyPressed = !_buyPressed;
    }

    private void UpdateStock()
    {
        _stock = InventoryService.UpdateStock();
        SnackBar.Add("Compra realizada", Severity.Success);
        ToggleBuyOverlay();
    }
}