@using Domain.Money.DTOs
@using Domain.Money.Entities
@using Domain.Products.DTOs
@using Presentation.Core.Components
@using Application.Products
@using Application.Money
@using Application.CashInventory
@inject IProductService ProductService
@inject ICashService CashService
@inject ICashInventoryService InventoryService
@inject ISnackbar SnackBar

<MudDialog @bind-IsVisible="_succesfulPurchase">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Su vuelto es de: @InventoryService.CostFormat(_finalChange)
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTreeView ExpandOnClick="true" T="string">
            <MudTreeViewItem  Value="@("Desglose de cambio")">
                @foreach (var item in _consumerChange)
                {
                    @if (item.Amount > 1)
                    {
                        <MudTreeViewItem Value="@(item.Amount+" "+item.Name+"s de "+item.Price)" />
                    }
                    else
                    {
                        <MudTreeViewItem Value="@(item.Amount+" "+item.Name +" de "+item.Price)" />
                    }
                }
            </MudTreeViewItem>
        </MudTreeView>
    </DialogContent>
    <DialogActions>
        <MudButton  Variant="Variant.Filled" Color="Color.Primary" OnClick="TogglesuccesfulPurchase" Class="px-10">Aceptar</MudButton>
        <MudSpacer/>
        <MudButton Disabled="true"/>
    </DialogActions>
 </MudDialog>

<Overlay IsOpen="buyPressed">
        <MudPaper Class="align-left border-none"  Elevation="0" Style="max-width: 60vw; width: 60vw; height: 43vw; overflow: auto; max-height: 95vh; ">
            <MudText Align="Align.Right" Typo="Typo.h6">Costo total: @InventoryService.CostFormat(totalCost) </MudText>
            <MudTable @ref="@_table" Items="@_consumerPayment" Elevation="6" Outlined="true" Hover="true" Breakpoint="Breakpoint.Sm">
                <ToolBarContent>
                    <MudButton Color="Color.Primary" OnClick="MakePayment" Variant="Variant.Filled">Realizar pago </MudButton>
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Transparent" OnClick="SendConmuteSignal" Size="Size.Medium">Cancelar</MudButton>
                </ToolBarContent> 
                <HeaderContent>
                    <MudTh>Tipo de pago</MudTh>
                    <MudTh>Valor</MudTh>
                    <MudTh>Unidades ingresadas</MudTh>
                </HeaderContent>
        
                <RowTemplate>
                        <MudTd DataLabel="Tipo de pago">@context.Name</MudTd>
                        <MudTd DataLabel="Valor">@context.Price</MudTd>
                        <MudTd DataLabel="Unidades ingresadas">
                            @if(context.RequestedUnits < 0)
                            {
                                <MudNumericField Immediate="true" @bind-Value="context.RequestedUnits" Label="Cantidad" Variant="Variant.Text"  Error="true" Min="0"/>
                            }
                            else{
                                <MudNumericField  Immediate="true" @bind-Value="context.RequestedUnits" Label="Cantidad" Variant="Variant.Text" Min="0"/>
                            }
                        </MudTd>
                </RowTemplate>
        </MudTable>
        </MudPaper>
</Overlay>

@code {
    [Parameter]
    public bool buyPressed { get; set; }
    [Parameter]
    public EventCallback conMuteOverlayState { get; set; }
    [Parameter]
    public EventCallback updateStockState { get; set; }
    [CascadingParameter]
    public double totalCost { get; set; }
    private double _consumerTotalPayment { get; set; }
    private IList<CashDTO> _changeBox = new List<CashDTO>();
    private IList<CashDTO> _consumerPayment = new List<CashDTO>(){
            new CashDTO(0,1000,"Billete",0),
            new CashDTO(0,500,"Moneda",0),
            new CashDTO(0,100,"Moneda",0),
            new CashDTO(0,50,"Moneda",0),
            new CashDTO(0,25,"Moneda",0),
    };
    private MudTable<CashDTO> _table;
    private bool _succesfulPurchase = false;
    private IList<Cash> _consumerChange = new List<Cash>();
    private double _finalChange = 0;

    protected override void OnInitialized()
    {
        IList<Cash> availableCash = CashService.GetAvailableCash();
        foreach (var product in availableCash)
        {
            _changeBox.Add(new CashDTO(product.Amount, product.Price, product.Name, 0));
        }
    }  

    private async Task SendConmuteSignal()
    {
        await conMuteOverlayState.InvokeAsync();
    }

    private void MakePayment()
    {
        InventoryService.SetInventory(_consumerPayment);
        _consumerTotalPayment = InventoryService.UpdateTotalCost();
        if (_consumerTotalPayment >= totalCost)
        {
            InventoryService.SetInventory(_changeBox);
            double changeBoxValue = InventoryService.GetFullInventoryCost();
            double consumerChange = _consumerTotalPayment - totalCost;
            if (changeBoxValue >= consumerChange)
            {
                _finalChange = consumerChange;
                var result = InventoryService.GetPaymentChange(consumerChange);
                GroupChange(result);
                IList<Cash>  availableCash =  new List<Cash>();
                foreach (var product in InventoryService.GetInventory())
                {
                    availableCash.Add(new Cash(product.Amount, product.Price, product.Name));
                }
                CashService.UpdateAvailableCash(availableCash);
                _succesfulPurchase = true;
            }
            else
            {
                SnackBar.Add("Fallo al realizar la compra, no hay cambio suficiente", Severity.Error);
            }
        }
        else
        {
            SnackBar.Add("El monto ingresado es insuficiente, inténtelo de nuevo", Severity.Error);
        }
    }

    private void InitConsumerPayment()
    {
        _consumerPayment = new List<CashDTO>(){
            new CashDTO(0,1000,"Billete",0),
            new CashDTO(0,500,"Moneda",0),
            new CashDTO(0,100,"Moneda",0),
            new CashDTO(0,50,"Moneda",0),
            new CashDTO(0,25,"Moneda",0),
        };
    }

    private void TogglesuccesfulPurchase()
    {
        _succesfulPurchase = false;
        InvokeAsync(StateHasChanged);
        _consumerChange = new List<Cash>();
        InitConsumerPayment();
        updateStockState.InvokeAsync();
    }

    private void GroupChange(IList<CashDTO> consumerChange)
    {
        var GroupedChange = 
                        from cash in consumerChange
                        group cash by cash.Price;

        foreach (var cashGroup in GroupedChange)
        {
            var cash = cashGroup.FirstOrDefault();
            _consumerChange.Add(new Cash(cashGroup.Count(), cash.Price, cash.Name));
        }
    }
}
