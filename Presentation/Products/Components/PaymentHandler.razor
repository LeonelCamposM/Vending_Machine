@using Domain.Money.Entities
@using Domain.Products.DTOs
@using Presentation.Core.Components
@using Application.Products
@using Application.Inventory
@using Application.Money
@inject IProductService ProductService
@inject ICashService CashService
@inject IInventoryService InventoryService
@inject ISnackbar SnackBar

<Overlay IsOpen="buyPressed">
        <MudPaper Class="align-left border-none"  Elevation="0" Outlined="false" Style="max-width: 60vw; width: 60vw; height: 43vw; overflow: auto; max-height: 95vh; ">
            <MudText Align="Align.Right" Typo="Typo.h6">Costo total: @InventoryService.CostFormat(totalCost) </MudText>
            <MudTable @ref="@_table" Items="@_consumerPayment" Elevation="4" Outlined="true" Hover="true" Breakpoint="Breakpoint.Sm">
                <ToolBarContent>
                    <MudButton Color="Color.Primary" OnClick="MakePayment" Variant="Variant.Filled">Realizar pago </MudButton>
                    <MudSpacer />
                </ToolBarContent> 
                <HeaderContent>
                    <MudTh>Tipo de pago</MudTh>
                    <MudTh>Valor</MudTh>
                    <MudTh>Unidades ingresadas</MudTh>
                </HeaderContent>
        
                <RowTemplate>
                        <MudTd DataLabel="Tipo de pago">@context.name</MudTd>
                        <MudTd DataLabel="Valor">@context.price</MudTd>
                        <MudTd DataLabel="Unidades ingresadas">
                            @if(context.requestedUnits < 0)
                            {
                                <MudNumericField Immediate="true" @bind-Value="context.requestedUnits" Label="Cantidad" Variant="Variant.Text"  Error="true" Min="0"/>
                            }
                            else{
                                <MudNumericField  Immediate="true" @bind-Value="context.requestedUnits" Label="Cantidad" Variant="Variant.Text" Min="0"/>
                            }
                        </MudTd>
                </RowTemplate>
        </MudTable>
        </MudPaper>
        <MudItem xs="12" md="12" Style="width: 100%;" Class="d-flex justify-start">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SendConmuteSignal" Size="Size.Medium">Cerrar</MudButton>
        </MudItem>
</Overlay>

@code {
    [Parameter]
    public bool buyPressed { get; set; }
    [Parameter]
    public EventCallback conMuteOverlayState { get; set; }
    [Parameter]
    public EventCallback updateStockState { get; set; }
    [CascadingParameter]
    public double totalCost { get; set; }

    private double _consumerTotalPayment { get; set; }

    private IList<ProductDTO> _changeBox = new List<ProductDTO>();

    private IList<ProductDTO> _consumerPayment = new List<ProductDTO>(){
            new ProductDTO(0,1000,"Billete",0),
            new ProductDTO(0,500,"Moneda",0),
            new ProductDTO(0,100,"Moneda",0),
            new ProductDTO(0,50,"Moneda",0),
            new ProductDTO(0,25,"Moneda",0),
    };

    protected override void OnInitialized()
    {
        IList<Cash> availableCash = CashService.GetAvailableCash();
        foreach (var product in availableCash)
        {
            _changeBox.Add(new ProductDTO(product.amount, product.price, product.name, 0));
        }
    }

    private MudTable<ProductDTO> _table;

    private async Task SendConmuteSignal()
    {
        await conMuteOverlayState.InvokeAsync();
    }

    private void MakePayment()
    {
        _consumerTotalPayment = InventoryService.UpdateTotalCost(_consumerPayment);
        if (_consumerTotalPayment >= totalCost)
        {
            double changeBoxValue = InventoryService.GetFullInventoryCost(_changeBox);
            double consumerChange = _consumerTotalPayment - totalCost;
            if (changeBoxValue >= consumerChange)
            {
                SnackBar.Add("Su vuelto es de "+InventoryService.CostFormat(consumerChange), Severity.Info);
                InitConsumerPayment();
                updateStockState.InvokeAsync();
            }
            else
            {
                SnackBar.Add("Fallo al realizar la compra, no hay cambio suficiente", Severity.Error);
            }
        }
        else
        {
            SnackBar.Add("El monto ingresado es insuficiente, inténtelo de nuevo", Severity.Error);
        }
    }

    private void InitConsumerPayment()
    {
        _consumerPayment = new List<ProductDTO>(){
            new ProductDTO(0,1000,"Billete",0),
            new ProductDTO(0,500,"Moneda",0),
            new ProductDTO(0,100,"Moneda",0),
            new ProductDTO(0,50,"Moneda",0),
            new ProductDTO(0,25,"Moneda",0),
        };
    }
}
