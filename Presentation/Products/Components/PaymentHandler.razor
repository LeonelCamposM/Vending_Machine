@using Domain.Money.DTOs
@using Domain.Money.Entities
@using Presentation.Core.Components
@using Application.Money
@using Application.CashInventory
@using Presentation.Products.Models
@inject ICashService CashService
@inject ICashInventoryService InventoryService
@inject ISnackbar SnackBar

<PaymentSummaryDialog consumerChange="_pageState.ConsumerChange" finalChange="_pageState.FinalChange" toggleDialogState="_ToggleDialog"  succesfulPurchase="_pageState.SuccesfulPurchase"/>
<Overlay IsOpen="buyPressed">
    <MudText Align="Align.Right" Typo="Typo.h6">Costo total: @InventoryService.CostFormat(totalCost) </MudText>
    <MudText Align="Align.Right" Typo="Typo.h6">Monto Ingresado: @InventoryService.CostFormat(_pageState.ConsumerTotalPayment) </MudText>
    <MudTable @ref="@_pageState.Table" Items="@_pageState.ConsumerPayment" Elevation="6" Outlined="true" Hover="true" Breakpoint="Breakpoint.Sm">
        <ToolBarContent>
            <MudButton Color="Color.Primary" Size="Size.Small" OnClick="ValidatePayment" Variant="Variant.Filled">Realizar pago </MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Transparent" OnClick="SendConmuteSignal" Size="Size.Small">Cancelar</MudButton>
        </ToolBarContent> 

        <HeaderContent>
            <MudTh>Tipo de pago</MudTh>
            <MudTh>Unidades ingresadas</MudTh>
             <MudTh>Valor</MudTh>
        </HeaderContent>
        
        <RowTemplate>
            <MudTd DataLabel="Tipo de pago">@context.Name</MudTd> 
            <MudTd DataLabel="Unidades ingresadas">
                <MudNumericField  Immediate="true" @bind-Value="context.RequestedUnits" Label="Cantidad" Variant="Variant.Text" Min="0"/>
            </MudTd>
            <MudTd DataLabel="Valor"> <MudText Align="Align.Right">@InventoryService.CostFormat(context.Price) </MudText> </MudTd>
        </RowTemplate>
    </MudTable>
</Overlay>

@code {
    [Parameter]
    public bool buyPressed { get; set; }
    [Parameter]
    public EventCallback conMuteOverlayState { get; set; }
    [Parameter]
    public EventCallback saveTransactionState { get; set; }
    [Parameter]
    public double totalCost { get; set; }
    private EventCallback _ToggleDialog => EventCallback.Factory.Create(this, TogglesuccesfulPurchase);
    private PaymentHandlerState _pageState = new PaymentHandlerState();
    private bool _isLoading = false;

    protected override void OnInitialized()
    {
        LoadAvailableCash();
        UpdateTotalInput();
    } 

    private void LoadAvailableCash()
    {
        IList<Cash> availableCash = CashService.GetAvailableCash();
        foreach (var product in availableCash)
        {
            _pageState.ChangeBox.Add(new CashDTO(product.Amount, product.Price, product.Name, 0));
        }
    }

    private async Task SendConmuteSignal()
    {
        await conMuteOverlayState.InvokeAsync();
    }

    private void ValidatePayment()
    {
        _isLoading = true;
        InventoryService.SetInventory(_pageState.ConsumerPayment);
        _pageState.ConsumerTotalPayment = InventoryService.UpdateTotalCost();
        if (_pageState.ConsumerTotalPayment >= totalCost)
        {
            MakePayment();
        }
        else
        {
            SnackBar.Add("El monto ingresado es insuficiente, inténtelo de nuevo", Severity.Error);
        }
        _isLoading = false;
    }

    private void MakePayment()
    {
        InventoryService.SetInventory(_pageState.ChangeBox);
        double changeBoxValue = InventoryService.GetFullInventoryCost();
        double ConsumerChange = _pageState.ConsumerTotalPayment - totalCost;
        if (changeBoxValue >= ConsumerChange)
        {
            _pageState.FinalChange = ConsumerChange;
            _pageState.ConsumerChange = InventoryService.GetPaymentChange(ConsumerChange);
            UpdateAvailableCash();
            _pageState.SuccesfulPurchase = true;
        }
        else
        {
            SnackBar.Add("Fallo al realizar la compra, no hay cambio suficiente", Severity.Error);
        }
    }

    private void TogglesuccesfulPurchase()
    {
        _pageState = new PaymentHandlerState();
        saveTransactionState.InvokeAsync();
    }

    private void UpdateAvailableCash()
    {
        IList<Cash>  availableCash =  new List<Cash>();
        foreach (var product in InventoryService.GetInventory())
        {
            availableCash.Add(new Cash(product.Amount, product.Price, product.Name));
        }
        CashService.UpdateAvailableCash(availableCash);
    }

    // refresh screen every 100ms
    private async Task UpdateTotalInput()
    {
        while (true)
        {
            if (!_isLoading)
            {
                InventoryService.SetInventory(_pageState.ConsumerPayment);
                _pageState.ConsumerTotalPayment = InventoryService.UpdateTotalCost();
                await InvokeAsync(StateHasChanged);
                await Task.Delay(100);
            }
        }
    }

}
