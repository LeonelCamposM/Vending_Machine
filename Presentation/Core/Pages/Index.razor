@using Application.Products
@using Domain.Products.Entities
@using Domain.Products.DTOs
@using Presentation.Core.Components
@using System.Threading;
@using System.Globalization
@inject IProductService ProductService
@inject ISnackbar SnackBar
@page "/"

@if(!_loading){ 
        <MudText Align="Align.Right" Typo="Typo.h6">Costo total: @_totalCost.ToString(specifier, culture) </MudText>
        <MudTable @ref="@_table" Items="@_stock" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Filter="new Func<ProductDTO,bool>(FilterFunction)">
            <ToolBarContent>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="UpdateStock">Comprar </MudButton>
                <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Buscar refresco" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent> 
            <HeaderContent>
                <MudTh>Nombre</MudTh>
                <MudTh>Unidades disponibles</MudTh>
                <MudTh>Unidades solicitadas</MudTh>
                <MudTh>Precio unitario</MudTh>
            </HeaderContent>
        
            <RowTemplate>
                    <MudTd DataLabel="Nombre">@context.name</MudTd>
                    <MudTd DataLabel="Unidades disponibles">@context.amount</MudTd>
                    <MudTd DataLabel="Unidades solicitadas">
                        @if(context.amount < context.requestedUnits){
                            <MudNumericField  @bind-Value="context.requestedUnits" Label="Cantidad" Variant="Variant.Text"  Error="true" Min="0"/>
                         }
                        else{
                            <MudNumericField @bind-Value="context.requestedUnits" Label="Cantidad" Variant="Variant.Text" Min="0"/>
                        }
                
                    </MudTd>

                <MudTd DataLabel="Precio unitario"> ₡ @context.price</MudTd>
            </RowTemplate>
        <PagerContent>
            <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
        </PagerContent>
    </MudTable>
}else{
    <Loading />
}

@code{
    private IList<ProductDTO> _stock = new List<ProductDTO>();
    private MudTable<ProductDTO> _table;
    private bool _loading = true;
    private string _searchString = "";
    private int _requestedUnits;
    private ProductDTO _selectedProduct;
    private double _totalCost = 0;
    private bool _inputError = false;
    string specifier = "N";
    public CultureInfo culture = CultureInfo.CreateSpecificCulture("es-ES");


    protected override void OnInitialized()
    {
        IList<Product> availableProducts = ProductService.GetAvailableProducts();
        foreach (var product in availableProducts)
        {
            _stock.Add(new ProductDTO(product.amount, product.price, product.name, 0));
        }
        _stock = _stock.OrderBy(pay => pay.name).ToList();
        _loading = false;
        UpdateTotalCost();
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private void UpdateStock()
    {
        foreach (var product in _stock)
        {
            if (product.requestedUnits != 0 && !_inputError)
            {
                product.amount -= product.requestedUnits;
                product.requestedUnits = 0;
                SnackBar.Add("Compra realizada", Severity.Success);
            }   
        }
    }

    // refresh screen every 100ms
    private async Task UpdateTotalCost()
    {
        while (true)
        {
            double cost = 0;
            validateAmount();
            if (!_inputError)
            {
                foreach (var product in _stock)
                {
                    cost += product.price * product.requestedUnits;
                }
                _totalCost = cost;
            }
            await InvokeAsync(StateHasChanged);
            await Task.Delay(100);
        }
    }

    private void validateAmount()
    {
        _inputError = false;
        foreach (var product in _stock)
        {
            if (product.amount < product.requestedUnits)
            {
                _inputError = true;
            }
        }

        if(_inputError == true)
        {
            SnackBar.Add("Se ha solicitado una cantidad de unidades errónea", Severity.Error);
        }
    }

    private bool FilterFunction(ProductDTO element) => Filter(element, _searchString);
    private bool Filter(ProductDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.name.Contains(searchString))
            return true;
        return false;
    }
}